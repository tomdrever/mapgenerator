// -- A simple class to store the current options --
class MapGenSettings {
  constructor(heightOffset, falloffGradient, falloffArea, contourMode, outlineMode) {
    this.heightOffset = heightOffset
    this.falloffGradient = falloffGradient
    this.falloffArea = falloffArea
    this.contourMode = contourMode
    this.outlineMode = outlineMode
  }
}

// -- TerrainMap is a map of a value (from the DS algorithm) to a colour
var terrainMap = new Map()
// Deep Ocean
terrainMap[0.05] = [31, 3, 168]
// Ocean
terrainMap[0.15] = [15, 144, 199]
// Beach/Shore
terrainMap[0.30] = [217, 219, 141]
// Lowest/grassland/forest/etc
terrainMap[0.40] = [99, 196, 0]
// Low/grassland/forest/etc
terrainMap[0.60] = [0, 127, 20]
// Hills/rocky/high terrain
terrainMap[0.80] = [100, 82, 29]
// Mountains/highest terrain
terrainMap[0.95] = [100, 83, 64]

// -- Main DS function -- 
function generateDiamondSquare(size, heightOffset) {
  // heightOffset is a number by which (alongside another random number) the height island
  // is modified. it correlates to smoothness

  // Create an empty grid, an array of arrays (size * size)
  var data = new Array(size);
  for (var i = 0; i < size; i++) {
    data[i] = new Array(size);

    for (var j = 0; j < size; j++) {
      // Initial the values in the grid as 0
      data[i][j] = 0;
    }
  }

  // Seed the data: set the top left, top right, bottom left and bottom right values to 0.5 - this
  // gives the algorithm a place to start on its first "Square" phase
  data[0][0] = data[0][size - 1] = data[size - 1][0] = data[size -1][size - 1] = 0.5;

  // This iterates the algorithm (based on smoothness), increasing the "depth",
  // so it starts with one big square/diamond, and gets smaller and smaller.
  // This is why a higher resolution image is basically the same as a lower one, 
  // except expressed in more details, with more pixels 
  for (var sideLength = size - 1; sideLength >= 2; sideLength /= 2, heightOffset /= 2.0) {
    var halfSide = sideLength / 2;

    // -- Square -- 
    for (var x = 0; x < size - 1; x += sideLength) {
      for (var y = 0; y < size - 1; y += sideLength) {

        // Get the average of the four surrounding corners
        var avg = data[x][y] +
          data[x + sideLength][y] +
          data[x][y + sideLength] +
          data[x + sideLength][y + sideLength];
        avg /= 4.0;

        // Add a "random" offset
        avg += (Math.random() * 2 * heightOffset) - heightOffset;

        // Clamp between 0 and 1
        avg = clamp(avg, 0.0, 1.0)

        // Set the square value to the average + a random number affected by the smoothness
        data[x + halfSide][y + halfSide] = avg
      }
    }

    // -- Diamond --
    for (var x = 0; x < size - 1; x += halfSide) {
      for (var y = (x + halfSide) % sideLength; y < size - 1; y += sideLength) {
        // Get the average of the four points on the diamond
        var avg = data[(x - halfSide + size - 1) % (size - 1)][y] +
          data[(x + halfSide) % (size - 1)][y] +
          data[x][(y + halfSide) % (size - 1)] +
          data[x][(y - halfSide + size - 1) % (size - 1)];
	      avg /= 4.0;

        // Add a "random" offset
        avg += (Math.random() * 2 * heightOffset) - heightOffset;

        // Clamp between 0 and 1
        avg = clamp(avg, 0.0, 1.0)

        data[x][y] = avg;

        // Wrap the values
        if (x == 0) data[size - 1][y] = avg;
        if (y == 0) data[x][size - 1] = avg;
      }
    }
  }
  return data;
}

// Credit Sebastian Lague for falloffMap
function evaluateFalloffValue(value, gradient, area) {
  // a - Lower a means more gradual fall-off
  var a = gradient

  // b - lower b means less space for island
  var b = area

  // TODO - get formula from video
  return Math.pow(value, a) / (Math.pow(value, a) + Math.pow(b - b * value, a))
}

// Generates a fall-off map, a gradual slope towards the sides.
// Using Math.abs(), values towards the sides will be higher and values in the
// middle will be lower

// When taken away from the values generated by the DS algorithm, this means the sides
// of the heightmap will be lower, creating an "island" effect
function generateFalloffMap(size, gradient, area) {
  // Create a new array grid, the same size as the DS map above
  var grid = new Array(size)
  for (i = 0; i < size; i++) {
    grid[i] = new Array(size)
    for (j = 0; j < size; j++) {
      var x = i / size * 2 - 1
      var y = j / size * 2 - 1

      // Use fancy math to determine the fall-off value for this position on the map
      var value = Math.max(Math.abs(x), Math.abs(y))

      grid[i][j] = evaluateFalloffValue(value, gradient, area)
    }
  }

  return grid
}

// -- Function that actually gets a grid of values, then gets a grid of colours, then
// prints it to the off-screen canvas --
function getMap(context, size, settings) {
  // Generate the required maps
  var dsMap = generateDiamondSquare(size, settings.heightOffset)
  var falloffMap = generateFalloffMap(size, settings.falloffGradient, settings.falloffArea)

  // Get the imagedata of the canvas (for drawing to it by changing the buffer)
  var imageData = context.getImageData(0, 0, size, size);
  var buffer = new Uint8ClampedArray(size * size * 4);

  // Generate the requested style of map
  if (settings.contourMode) {
    getContourMap(buffer, size, dsMap, falloffMap);
  }
  else if (settings.outlineMode) {
    getOutlineMap(buffer, size, dsMap, falloffMap);
  }
  else {
    getColourMap(buffer, size, dsMap, falloffMap);
  }

  // Change the imagedata's buffer
  imageData.data.set(buffer);

  // Update the canvas's imagedata
  context.putImageData(imageData, 0, 0);
}

// -- Given a colour and a position, sets that position in the buffer to that colour --  
function setBufferColourAtPosition(buffer, colour, x, y, size) {
  var pos = (y * size + x) * 4;

  for (var i = 0; i < 3; i++) {
    buffer[pos + i] = colour[i];
  }

  buffer[pos + 3] = 255;
}

// -- Returns a map that merges the contour map and the colour map --
function getOutlineMap(buffer, size, dsMap, falloffMap)
{
  var previousKey = 0.05;

  for (var x = 0; x < size; x++) {
    for (var y = 0; y < size; y++) {
      var DSvalue = clamp(dsMap[x][y] - falloffMap[x][y], 0.0, 1.0);

      var terrainMapKey = getTerrainMapKey(DSvalue);

      var colour = [];

      // If this is a new "strata?" "level?"
      if (terrainMapKey == previousKey) {
        colour = terrainMap[terrainMapKey];
      } else {
        colour = [21, 21, 18];
      }

      setBufferColourAtPosition(buffer, colour, x, y, size);

      previousKey = terrainMapKey;
    }
  }
}

// -- Uses a grid of DS values to generate a simple contour-like map -- 
function getContourMap(buffer, size, dsMap, falloffMap, fillColour)
{
  var previousKey = 0.05;

  for (var x = 0; x < size; x++) {
    for (var y = 0; y < size; y++) {
      var DSvalue = clamp(dsMap[x][y] - falloffMap[x][y], 0.0, 1.0);

      var terrainMapKey = getTerrainMapKey(DSvalue);

      var colour = [];

      // If this is a new "strata?" "level?" "band?"
      if (terrainMapKey == previousKey) {
        if (fillColour) {
          colour = terrainMap[terrainMapKey];
        } else {
          colour = [217, 213, 184];
        }
      } else {
        colour = [21, 21, 18];
      }

      setBufferColourAtPosition(buffer, colour, x, y, size);

      previousKey = terrainMapKey;
    }
  }
}

// -- Returns a basic grid of colours when given a grid of DS values
function getColourMap(buffer, size, dsMap, falloffMap) {
  var colour = [31, 3, 168];
  var terrainMapKey = 0.05;

  for (var x = 0; x < size; x++) {
    for (var y = 0; y < size; y++) {
      // Map the noise values generated by the Diamond-Square algorithm to rgb colours
      var DSvalue = clamp(dsMap[x][y] - falloffMap[x][y], 0.0, 1.0);
      
      // Uncomment to test fall-off
      //var DSvalue = falloffMap[x][y]

      terrainMapKey = getTerrainMapKey(DSvalue);

      colour = terrainMap[terrainMapKey];

      setBufferColourAtPosition(buffer, colour, x, y, size);
    }
  }
}

// -- Function that iterates through the TerrainMap, and returns the colour
// of the "band" or "strata" of terrain the value belongs to --
function getTerrainMapKey(DSvalue) {
  var returnKey;

  for (var key in terrainMap) {
    if (terrainMap.hasOwnProperty(key)) {
      if (DSvalue > key) {
        returnKey = key;
      }
    }
  }

  if (returnKey == null) {
    return 0.05;
  } else {
    return returnKey;
  }
}
